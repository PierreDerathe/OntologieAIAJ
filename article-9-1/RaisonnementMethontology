# Methontology

Une conceptualisation de l'article 9-1 et du code civile en général est réalisé [ici](https://docs.google.com/spreadsheets/d/1LXRdw52-h6httHf_AmzNjLxbpeQLAh-wXLBkRd5JaR8/edit?usp=sharing). Les choix et raisonnement vont être décris ici.

## Glossaire

Pour reprendre la méthode de METHONTOLOGY, un [glossaire des termes à représenter](/article-9-1/glossaire-article-9-1%20-%20Glossaire.csv) est nécessaire pour organiser la réflexion.

Le glossaire doit contenir tous les termes pertinents, avec leur description, synonymes et acronymes et, le plus important, le type(concept, instance, attribut, relation) des termes.

Une question  s'est posée pour les type de sous-partie (Article, Chapitre...) et de ressource légale(Loi, Code...) de les représenter comme des des concepts à part entières ou à l'aide d'attribut avec des type énumérés. Tant que chaque type est indisociable de l'autre à part le nom, le type énuméré marche bien et permet de simplifier la structure et la généralisation.

J'ai fait fait le choix de représenter les sous-parties avec des types énumérés et les type légales comme des concepts. Je regrette déjà ce choix pour les sous parties car l'article pourrait avoir des spécificité que le type énuméré complique à exprimer.

## Taxonomie et [définitions des concepts](/article-9-1/article-9-1%20-%20DictionnaireConcept.csv)

On constate dés cette étape que se baser sur les termes du code civil est limités. En effet, on manque les classes génériques permettant de faire la taxonomie. J'ai donc rajouter les termes suivants:

- Concept
- Etat d'application
- Ressource Légale
- Document
- Sous-partie de Document
- Publication officielle

La question de la décomposition disjointe sera utile pour determiner les classes disjointes lors de la création de l'ontologie. Ceci dit, les question de partition et de décomposition exaustive ne sont pas approchable du au manque d'information personnel et dans l'exemple du code civil.

![Taxonomie et diagramme](/article-9-1/Taxonomie-article-9-1.drawio.png)

## [Définitions des relations](/article-9-1/article-9-1%20-%20DefinitionRelation.csv)

La relation d'appartenance `has_part` a commencé spécifique aux ressources légales mais une utilisation général sera nécéssaire. Des relation d'appartenance plus spécifique pourront être définit, par exemple `publie` ou `version_de`.

Une relation générique `change` pour rassembler `modifie`, `codifie`, `cree`, `abroge` sera rajouter. corriger les diagrammes.

La plupart des relations avec une cardinalité max de 1 devront probablement être corrigé: Un article peut être creer par une loi et un article de cette loi , donc deux entités différentes sauf l'appartenance peut être pris en compte.

Ajout de `version_actuelle` pour préciser la version en application d'un texte consolidé. Il faudra une refléxion plus poussé pour l'utilisation des versions et texte consolidé (un attribut description_actuelle est ajouté).

## [Définitions des attributs](/article-9-1/article-9-1%20-%20DefinitionAttribut.csv)

Différent attribut de date (application, création...) qui peuvent demander des point dans le temps ou des périodes.

Des possibilité d'intégrations en particulier avec dcterms est explorer(indentifier, date, description...) mais pour l'instant mis de côté dans la création de l'ontologie.

Important d'utiliser des type clair (xsd:string, xsd:dateTime) pour les attributs.

## Gestion des versions

La première proposition était:

- Les relations `version` et `version_de` expriment les liens entre version et document principale
- La classe TexteConsolide exprime que une ressource légale à des version et est donc le domaine de `version`
- La classe VersionLegale représente les versions
- La relation `version_actuelle` est une sous-relation de `version` pour désigner la version valable actuelle. Peut être a renommer `version_en_vigeur`
- Les dates de création, abrogation et modification sont contenue dans le TexteConsolide

Deuxième proposition:

```ttl
:version rdf:type owl:ObjectProperty ;
         owl:inverseOf :version_de ;
         rdf:type owl:InverseFunctionalProperty ;
         rdfs:domain :Article ;
         rdfs:range :VersionLegale .
```

- Définition de texte consolidé: La consolidation des textes consiste lorsqu'un article de texte (ou de code) est modifié, à le réécrire en y intégrant la modification apportée. Les versions modifiées ou abrogées sont présentes dans le fonds documentaire au même titre que les versions en vigueur.
- Data property `texte_consolide` boolean pour si un article à plusieurs versions.
- Les dates de début et de fin d'une version en vigueur seront dans les Version .
- Les dates de création et d'abrogation sont dans l'Article. Suppression de date de modification.
- Distingué les propriétés commune et propre a chaque versions.
- La loi qui modifie un article pointe vers l'Article ou la VersionLegale mise en vigueur par la loi ou la version plus valable a cause de la loi?

Exemple de query pour récupérer la description d'un article à une période précise (non-testé):

```sparql
SELECT ?version ?description
WHERE {
  :CCArt9-1 :version ?version .
  ?version a :ArticleVersion ;
           :date_en_vigueur_debut ?start .
  OPTIONAL { ?version :date_en_vigueur_fin ?end . }
  OPTIONAL { ?version :description ?description . }

  FILTER (
    xsd:dateTime("1996-01-01T00:00:00") >= ?start &&
    (!BOUND(?end) || xsd:dateTime("1996-01-01T00:00:00") < ?end)
  )
}
```

Un choix encore en attente est où placer ArticleVersion dans la taxonomie. Est-ce une sous-classe de Article ou de RessourceLegale? Faut-il créé une classe Version générique et comment la placé dans la taxonomie?

### Limiter le nombre de classe

[Ontology 101](/ressources/ontology101.pdf) propose des guidelines pour quand introduire des nouvelles classes. Les sous-classes d'une classe ont généralement:

- des propriétés additionnelles
- des restrictions supplémentaires
- participe à des retations différentes

Dans l'ontologie, sauf certaines classes(PublicationOfficielle, Article), un certain nombre de classe n'ont, pour l'instant pas des caractéristiques pariculières(Loi, Décret, Chapitre, Paragraphe...).

Attention, ce choix peut-être discutable, d'après ontology 101:

    Another  reason  to  introduce  new  classes  without  any  new  properties  is  to  model  concepts among  which  domain experts commonly make a  distinction even though we  may have decided not to model the distinction itself.

Je crée donc 2 classes génériques TypeRessourceLegale et TypeSousPartie avec les relations et les instances pour distinguer les différents types de ressource légale et de sous-partie sans caractéristique pariculière.

Ce fonctionnement peut être adapté si des classes on des caractéristique spécifique qui nécéssite qu'elles soit créées.
